name: ci

on:
  push:
    branches:
      - temp-main
  pull_request:
    branches:
      - temp-main

# Note: if: success() is used in several jobs -
# this ensures that it only executes if all previous jobs succeeded.

# if: steps.cache-yarn.outputs.cache-hit != 'true'
# will skip running `yarn install` if it successfully fetched from cache

jobs:
  prebuild:
    name: Pre-build checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2

      - name: Install Node.js v12
        uses: actions/setup-node@v2
        with:
          node-version: "12"

      - name: Install helm
        uses: azure/setup-helm@v1.1

      - name: Fetch dependencies from cache
        id: cache-yarn
        uses: actions/cache@v2
        with:
          path: "**/node_modules"
          key: yarn-build-${{ hashFiles('**/yarn.lock') }}

      - name: Install dependencies
        if: steps.cache-yarn.outputs.cache-hit != 'true'
        run: yarn --frozen-lockfile

  build:
    name: Build
    needs: prebuild
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Install Node.js v12
        uses: actions/setup-node@v2
        with:
          node-version: "12"

      - name: Fetch dependencies from cache
        id: cache-yarn
        uses: actions/cache@v2
        with:
          path: "**/node_modules"
          key: yarn-build-${{ hashFiles('**/yarn.lock') }}

      - name: Install dependencies
        if: steps.cache-yarn.outputs.cache-hit != 'true'
        run: yarn --frozen-lockfile

      - name: Build code-server
        run: yarn build

      # Parse the hash of the latest commit inside lib/vscode
      # use this to avoid rebuilding it if nothing changed
      # How it works: the `git log` command fetches the hash of the last commit
      # that changed a file inside `lib/vscode`. If a commit changes any file in there,
      # the hash returned will change, and we rebuild vscode. If the hash did not change,
      # (for example, a change to `src/` or `docs/`), we reuse the same build as last time.
      # This saves a lot of time in CI, as compiling VSCode can take anywhere from 5-10 minutes.
      - name: Get latest lib/vscode rev
        id: vscode-rev
        run: echo "::set-output name=rev::$(git log -1 --format='%H' ./lib/vscode)"

      - name: Attempt to fetch vscode build from cache
        id: cache-vscode
        uses: actions/cache@v2
        with:
          path: |
            lib/vscode/.build
            lib/vscode/out-build
            lib/vscode/out-vscode
            lib/vscode/out-vscode-min
          key: vscode-build-${{ steps.vscode-rev.outputs.rev }}

      - name: Build vscode
        if: steps.cache-vscode.outputs.cache-hit != 'true'
        run: yarn build:vscode

      # The release package does not contain any native modules
      # and is neutral to architecture/os/libc version.
      - name: Create release package
        run: yarn release
        if: success()

      # https://github.com/actions/upload-artifact/issues/38
      - name: Compress release package
        run: tar -czf package.tar.gz release

      - name: Upload npm package artifact
        uses: actions/upload-artifact@v2
        with:
          name: npm-package
          path: ./package.tar.gz

  # TODO: cache building yarn --production
  # possibly 2m30s of savings(?)
  # this requires refactoring our release scripts
  package-linux-amd64:
    name: x86-64 Linux build
    needs: build
    runs-on: ubuntu-latest
    container: "centos:7"

    steps:
      - uses: actions/checkout@v2

      - name: Install Node.js v12
        uses: actions/setup-node@v2
        with:
          node-version: "12"

      - name: Install development tools
        run: |
          yum install -y epel-release centos-release-scl
          yum install -y devtoolset-9-{make,gcc,gcc-c++} jq rsync

      - name: Install nfpm and envsubst
        run: |
          curl -sfL https://install.goreleaser.com/github.com/goreleaser/nfpm.sh | sh -s -- -b ~/.local/bin v2.3.1
          curl -L https://github.com/a8m/envsubst/releases/download/v1.1.0/envsubst-`uname -s`-`uname -m` -o envsubst
          chmod +x envsubst
          mv envsubst ~/.local/bin
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Install yarn
        run: npm install -g yarn

      - name: Download npm package
        uses: actions/download-artifact@v2
        with:
          name: npm-package

      - name: Decompress npm package
        run: tar -xzf package.tar.gz

      # NOTE: && here is deliberate - GitHub puts each line in its own `.sh`
      # file when running inside a docker container.
      - name: Build standalone release
        run: source scl_source enable devtoolset-9 && yarn release:standalone

      - name: Sanity test standalone release
        run: yarn test:standalone-release

      - name: Build packages with nfpm
        run: yarn package

      - name: Upload release artifacts
        uses: actions/upload-artifact@v2
        with:
          name: release-packages
          path: ./release-packages

  docker-amd64:
    runs-on: ubuntu-latest
    needs: package-linux-amd64
    steps:
      - uses: actions/checkout@v2

      - name: Download release package
        uses: actions/download-artifact@v2
        with:
          name: release-packages
          path: ./release-packages

      - name: Run ./ci/steps/build-docker-image.sh
        run: ./ci/steps/build-docker-image.sh

      - name: Upload release image
        uses: actions/upload-artifact@v2
        with:
          name: release-images
          path: ./release-images
